package com.bairuitech.shuanglu.net;

import java.io.IOException;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.FormBody;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.MultipartBody.Builder;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import android.content.Context;
import android.os.Handler;
import android.util.Log;
import android.widget.ImageView;

import com.bairuitech.shuanglu.utils.StringManager;
import com.google.gson.Gson;
import com.google.gson.internal.$Gson$Types;
import com.squareup.picasso.Picasso;

public class OkHttpUtils {

	private static OkHttpUtils mInstance;
	private OkHttpClient mHttpClient;
	private Gson mGson;
	private Handler mHandler;

	private OkHttpUtils() {
		mHttpClient = new OkHttpClient();
		OkHttpClient.Builder builder = mHttpClient.newBuilder();
		builder.connectTimeout(10, TimeUnit.SECONDS);
		builder.readTimeout(10, TimeUnit.SECONDS);
		builder.writeTimeout(30, TimeUnit.SECONDS);
		mGson = new Gson();
		mHandler = new Handler();
	}

	public static OkHttpUtils getInstance() {
		if (null == mInstance) {
			synchronized (OkHttpUtils.class) {
				if (null == mInstance) {
					mInstance = new OkHttpUtils();
				}
			}
		}
		return mInstance;
	}

	// get请求
	public void get(String url, BaseCallback callback) {
		url = StringManager.replaceUrl(url);
		// 获取request对象
		Request request = buildRequest(url, HttpMethodType.GET, null);
		// 开始请求
		doRequest(request, callback);
	}

	// post请求
	public void post(String url, Map<String, String> params,
			BaseCallback callback) {
		url = StringManager.replaceUrl(url);
		// 获取request对象
		Request request = buildRequest(url, HttpMethodType.POST, params);
		// 开始请求
		doRequest(request, callback);
	}

	public void post(String url, Map<String, String> params,
			BaseCallback callback,boolean isReplaceUrl) {
		if (isReplaceUrl){
			url = StringManager.replaceUrl(url);
		}
		// 获取request对象
		Request request = buildRequest(url, HttpMethodType.POST, params);
		// 开始请求
		doRequest(request, callback);
	}

	public void uploadFile(String url, byte[] fileByte,
			Map<String, String> params, BaseCallback baseCallback) {
		url = StringManager.replaceUrl(url);
		Builder builder = new MultipartBody.Builder()
				.setType(MultipartBody.FORM);

		builder.addFormDataPart("file", "test.jpg", RequestBody.create(
				MediaType.parse("multipart/form-data"), fileByte));

		if (params != null) {
			for (Map.Entry<String, String> entry : params.entrySet()) {
				builder.addFormDataPart(entry.getKey(), entry.getValue());
			}
		}

		Request request = new Request.Builder().url(url).post(builder.build())
				.build();

		// 开始请求
		doRequest(request, baseCallback);
	}

	// 构建request对象
	private Request buildRequest(String url, HttpMethodType methodType,
			Map<String, String> params) {
		Request.Builder builder = new Request.Builder().url(url);

		if (methodType == HttpMethodType.POST) {// post请求
			RequestBody body = builderFormData(params);
			builder.post(body);
		} else if (methodType == HttpMethodType.GET) {// get请求
			builder.get();
		} else if (methodType == HttpMethodType.UPLOAD_FILE) {// 上传文件

		}

		return builder.build();
	}

	// 通过params获取requestbody
	private RequestBody builderFormData(Map<String, String> params) {
		FormBody.Builder builder = new FormBody.Builder();

		if (params != null) {
			for (Map.Entry<String, String> entry : params.entrySet()) {
				builder.add(entry.getKey(), entry.getValue());
			}
		}
		return builder.build();
	}

	// 无论是post请求还是get请求都需要用到request
	private void doRequest(final Request request,
			final BaseCallback baseCallback) {
		mHttpClient.newCall(request).enqueue(new Callback() {
			@Override
			public void onFailure(Call call, IOException e) {
				callbackFailure(baseCallback, e);
			}

			@Override
			public void onResponse(Call call, Response response)
					throws IOException {

				if (response.isSuccessful()) {
					String resultStr = response.body().string();
					if (baseCallback.mType == String.class) {
						/* baseCallback.onSuccess(response,resultStr); */
						callbackSuccess(baseCallback, resultStr);
					} else {
						try {
							Object obj = mGson.fromJson(resultStr,
									baseCallback.mType);
							// Object obj = resultStr;
							/* baseCallback.onSuccess(response,obj); */
							callbackSuccess(baseCallback, obj);
						} catch (com.google.gson.JsonParseException e) { // Json解析的错误
							/* baseCallback.onError(response,response.code(),e); */
							callbackFailure(baseCallback, e);
						}
					}

				} else {
					callbackFailure(baseCallback, new Exception("errorcode="
							+ response.code()));
					/* baseCallback.onError(response,response.code(),null); */
				}

			}
		});
	}

	private void callbackSuccess(final BaseCallback callback, final Object obj) {
		mHandler.post(new Runnable() {
			@Override
			public void run() {
				callback.onSuccess(obj);
			}
		});
	}

	private void callbackFailure(final BaseCallback callback, final Exception e) {

		mHandler.post(new Runnable() {
			@Override
			public void run() {// mHandler在哪个线程new的，run就在那个线程运行
				callback.onFailure(e);
			}
		});
	}

	// 回调
	public static abstract class BaseCallback<T> {
		Type mType = getSuperclassTypeParameter(getClass());

		// // 加载网络数据成功前，进度条等显示
		// public abstract void onBeforeRequest(Request request);
		// 请求成功时调用此方法
		// public abstract void onResponse(Response response);
		// 状态码大于200，小于300 时调用此方法
		public abstract void onSuccess(T t);

		// 请求失败时调用此方法
		public abstract void onFailure(Exception e);

		// 状态码400，404，403，500等时调用此方法
		// public abstract void onError(Response response, int code, Exception
		// e);

		// Token 验证失败。状态码401,402,403 等时调用此方法
		// public abstract void onTokenError(Response response, int code);

	}

	// 枚举，区分get与post
	enum HttpMethodType {
		GET, POST, UPLOAD_FILE
	}

	static Type getSuperclassTypeParameter(Class<?> subclass) {
		Type superclass = subclass.getGenericSuperclass();
		if (superclass instanceof Class) {
			throw new RuntimeException("Missing type parameter.");
		}
		ParameterizedType parameterized = (ParameterizedType) superclass;
		return $Gson$Types
				.canonicalize(parameterized.getActualTypeArguments()[0]);
	}
	
	
	public static void loadImg(Context context,String url,ImageView imageView,int defaultImg){
		url = StringManager.replaceUrl(url);
		Picasso.with(context).load(url).placeholder(defaultImg).into(imageView);
	}

}
